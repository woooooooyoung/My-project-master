using System.Collections;
using System.Collections.Generic;
using Unity.Collections;
using UnityEngine;

public class UnityGmaeObject : MonoBehaviour
{
    /*
     * 게임오브젝트{GmaeObject)
     * 
     * 씬을 구성하는 모든 오브젝트의 기본 클래스
     * 게임오브젝트만으로는 독자적인 기능이 없음. 실질적인 기능은 컴포넌트들이 수행
     * 게임오브젝트는 컴포넌트들을 가지기 위한 컨테이너
     * 독자적인 기능은 없고 여러가지 기능을 붙이면 동작하고 붙이지 않으면 동작핮 ㅣ않는다
     */
    // 큐브도 게임 오브젝트 디렉션라이트도 게임오브젝트 카메라도 게임오브젝트처럼 씬에 있고 선택할 수 있는 것들은 전부 게임 오브젝트, 아무것도 안들어있는 빈 게임오브젝트도 게임오브젝트, 보여지는 모든 물체와 저장소도 게임 오브젝트, 비어있으면서 안보이는 몬스터 스포너 같은 보여지지 않는 기능성 컴포넌트들을 가진것들도 전부 게임오브젝트
    // 컴포넌트들을 가질수 있다는 것이 게임컴포넌트
    // Mesh Filter = 보여지기 위한 기능, 여기서 지금있는 모델들의 여러가지 부속까지 보여줄수 있음

    GameObject gameObject;
    // <게임오브젝트 구성요소>
    // name			: 게임오브젝트의 이름
    // active		: 게임오브젝트의 활성화 여부, 비활성화인 경우 씬에 없는 게임오브젝트로 취급됨
    // static		: 게임오브젝트의 정적상태 여부, 런타임 당시 변경되지 않는 데이터를 지정하여 최적화, 메모리의 스태틱과는 다른영역임
    // tag			: 게임오브젝트의 태그, 게임오브젝트를 특정하기 위한 수단으로 사용
    // layer		: 게임오브젝트의 레이어, 씬에서 게임오브젝트를 분리하는 기준 (카메라의 선별적 표현, 충돌 그룹, 레이어 마스크 등에 사용)
    // component	: 게임오브젝트에 포함된 기능모듈, 게임오브젝트는 컴포넌트를 담기위한 컨테이너 역할

    public void Test()
    {
        gameObject.name = "asd";                // 이름을 asd로 바꿀수도 있음.
        gameObject.active = false;              // 활성화 비활선화여부 선정, 활성화 안할시 게임씬에 없는 취급, 잠깐 안쓸떄 비활성화 쓸때 활성화하는식으로 써줌, 연산을 줄임으로써 삭제하는것보다 이 방식이 훨씬 빠름, false : 사용 안함 true : 사용함
        gameObject.SetActive(false);            // SetActive(false) 또는 active = false 둘 중 아무거나 써도 상관없음
        gameObject.tag = "asd";                 // 특정해야하는 오브젝트가 있다면 tag로 찾아주면 빠르다, 다만 테그를 남발하면 그 의미가 좀 사라진다. 별로 없는 것들중에 빨리 찾기위해 사용하는 용도이기 때문에 남발하지 말자.
        gameObject.layer = 1;                   // 계층을 구분 해야하는 용도로 사용함, 예를 들어 인벤토리를 켰는데 플레이어랑 부딪힐 때
    }
}
